schema: 1 # currently only version 1 is supported. All schema versions are going to be backward compatible unless otherwise noted. We plan to support decrepated versions for atleast six months
type: normalize # valid types are normalize,general-context,policy-context and resource-context

vendor-id: foo-cloud-cspm-vendor # this identifies the vendor that generated the alert
id: foo-cloud-normalize # this is the id of this workflow. If you change the id, the new id will represent a new workflow

filters: # before this workflow can run, Dassana engine will match the input to see if it passes the filters.
  - match-type: all # valid values are all or any
    rules: # these are JQ expressions which must return either true or false
      - .badThingJustHappened and .badThingJustHappened.description
      - .badThingJustHappened.description | contains ("fubar")

#this workflow being a demo workflow doesn't have steps. In general, you will have steps that take the input and output something meaningful
#for example, refer to https://github.com/dassana-io/dassana/blob/main/content/workflows/vendors/security-hub/aws-config.yaml

# the output of this workflow is sent to general-context, resource-context and policy-context workflows
# note that each array represents a JSON key

#here is a sample JSON object which is generated by this workflow

# {
# 	"csp": "demo-csp",
# 	"resourceId": "demo-resoureceId",
# 	"canonicalId": "demo-canonicalId",
# 	"service": "demo-service",
# 	"vendorPolicy": "depo-vendorPolicy",
# 	"vendorId": "foo-cloud",
# 	"alertId": "demo-alert-id",
# 	"resourceContainer": "demo-resourceContainer",
# 	"region": "demo-region",
# 	"resourceType": "demo-resourceType"
# }

output:
  - name: vendorId
    value: foo-cloud-cspm-vendor
    value-type: STRING # the field value-type is optional with the default value of JQ. This is a demo workflow so we are not extracting anyting from steps using jq, so we are using STRING which simply puts the value in the JSON key
  - name: alertId
    value: demo-alert-id
    value-type: STRING
  - name: canonicalId
    value: demo-canonicalId
    value-type: STRING
  - name: vendorPolicy
    value: demo-vendorPolicy
    value-type: STRING
  - name: csp
    value: demo-csp
    value-type: STRING
  - name: resourceContainer
    value: demo-resourceContainer
    value-type: STRING
  - name: region
    value: demo-region
    value-type: STRING
  - name: service
    value: demo-service
    value-type: STRING
  - name: resourceType
    value: demo-resourceType
    value-type: STRING
  - name: resourceId
    value: demo-resoureceId
    value-type: STRING

# Dassana deployment automatically creates an outbound queue. After the output is sent to general-context, resource-context and policy-context workflows
# we wait for those worlflows to finish. As soon as they finish, the response from those workflows are merged into a JSON key named "dassana"
# This "dassana" key has output of all of the worlflows i.e. all of the context. Finally, this "dassana" key is added to the original alert and the alert is sent to this outbound queue

# for AWS Config/security-hub, the enabled is set to false as we have a post processor which directly integrates with securityhub
output-queue:
  enabled: true
